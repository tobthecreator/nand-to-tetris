 
/*
    Okay do we have the same pattern here as the Mux?

    x s2 s1 y
    0  0  0 a
    0  0  1 b
    0  1  0 c
    0  1  1 d

    Yes.

    So... let's try the same compositing trick.

    Except this time we're decomposing, so the stages should expand not contract
*/

CHIP DMux4Way {
    IN in, sel[2];
    OUT a, b, c, d;

    PARTS:
    // Stage one
    DMux(in=in, sel=sel[0], a=out1, b=out2);

    // Why the weird juggling here? Why not sequentially a b c d?
    // Look up at the logic table
    // When s[0] is low, the output is a and c, not a and b.
    // When s[0] is hihg, the output is b and d, not c and d.
    // That implies The second selection bit will choose between these jumbled pairings, and we organize the pins likewise
    // In real life the wiring just goes to the right pin
    DMux(in=out1, sel=sel[1], a=a, b=c);
    DMux(in=out2, sel=sel[1], a=b, b=d);

    // You could get everything in a nice neat order if you evaluate backwards

    /*
        And now because you're evaluating with s2, the inputs are more neatly aligned.

        That's a good trick to keep in your pocket when we level up to Dmux8Ways here in a sec

        DMux(in=in, sel=sel[1], a=out1, b=out2);
        DMux(in=out1, sel=sel[0], a=a, b=b);
        DMux(in=out2, sel=sel[0], a=c, b=d);
    */
}